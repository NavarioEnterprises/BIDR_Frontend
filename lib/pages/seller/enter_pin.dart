

import 'package:bidr/constants/Constants.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_fonts/google_fonts.dart';

class PinEntryDialog extends StatefulWidget {
  final Function(String pin)? onPinCompleted;
  final Function()? onCancel;
  final int pinLength;

  const PinEntryDialog({
    Key? key,
    this.onPinCompleted,
    this.onCancel,
    this.pinLength = 4,
  }) : super(key: key);

  @override
  _PinEntryDialogState createState() => _PinEntryDialogState();
}

class _PinEntryDialogState extends State<PinEntryDialog> {
  late List<TextEditingController> _controllers;
  late List<FocusNode> _focusNodes;
  String pin = '';

  @override
  void initState() {
    super.initState();
    _controllers = List.generate(
      widget.pinLength,
          (index) => TextEditingController(),
    );
    _focusNodes = List.generate(
      widget.pinLength,
          (index) => FocusNode(),
    );

    // Auto focus on first field
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _focusNodes[0].requestFocus();
    });
  }

  @override
  void dispose() {
    for (var controller in _controllers) {
      controller.dispose();
    }
    for (var focusNode in _focusNodes) {
      focusNode.dispose();
    }
    super.dispose();
  }

  void _onDigitChanged(String value, int index) {
    if (value.length == 1) {
      // Move to next field
      if (index < widget.pinLength - 1) {
        _focusNodes[index + 1].requestFocus();
      } else {
        // Last field, unfocus
        _focusNodes[index].unfocus();
      }
    } else if (value.isEmpty && index > 0) {
      // Move to previous field if current is empty
      _focusNodes[index - 1].requestFocus();
    }

    // Update PIN
    _updatePin();
  }

  void _updatePin() {
    pin = _controllers.map((controller) => controller.text).join();
    setState(() {});
  }

  void _onKeyPressed(RawKeyEvent event, int index) {
    if (event is RawKeyDownEvent) {
      if (event.logicalKey == LogicalKeyboardKey.backspace) {
        if (_controllers[index].text.isEmpty && index > 0) {
          // Move to previous field and clear it
          _focusNodes[index - 1].requestFocus();
          _controllers[index - 1].clear();
          _updatePin();
        }
      }
    }
  }

  void _verifyPin() {
    if (pin.length == widget.pinLength) {
      widget.onPinCompleted?.call(pin);
    } else {
      // Show error or handle incomplete PIN
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please enter a complete PIN'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(24),
      ),
      child: Container(
        width: 400,
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Header with close button
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                 Text(
                  'Enter PIN',
                  style: GoogleFonts.manrope(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Constants.ftaColorLight,
                  ),
                ),
                IconButton(
                  onPressed: () {
                    widget.onCancel?.call();
                    Navigator.of(context).pop();
                  },
                  icon: const Icon(Icons.close),
                  color: Colors.grey.shade600,
                  padding: EdgeInsets.zero,
                  constraints: const BoxConstraints(),
                ),
              ],
            ),
            const SizedBox(height: 32),
            Image.asset(
              "lib/assets/images/bidr_logo.png",
              width: 80,
              height: 80,
            ),
            const SizedBox(height: 24),
            // Instruction text
             Text(
              'Please Enter the Unique Identification\nNumber Generated by the Buyer',
              textAlign: TextAlign.center,
              style: GoogleFonts.manrope(
                fontSize: 14,
                color: Colors.grey,
                height: 1.4,
              ),
            ),
            const SizedBox(height: 32),
            // PIN input fields
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: List.generate(widget.pinLength, (index) {
                return Container(
                  width: 50,
                  height: 60,
                  child: RawKeyboardListener(
                    focusNode: FocusNode(),
                    onKey: (event) => _onKeyPressed(event, index),
                    child: TextField(
                      controller: _controllers[index],
                      focusNode: _focusNodes[index],
                      textAlign: TextAlign.center,
                      keyboardType: TextInputType.number,
                      maxLength: 1,
                      style:  GoogleFonts.manrope(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Constants.ftaColorLight
                      ),
                      decoration: InputDecoration(
                        counterText: '',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(360),
                          borderSide: BorderSide(
                            color: Constants.ftaColorLight,
                            width: 1.5,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(360),
                          borderSide: BorderSide(
                            color: Constants.ftaColorLight,
                            width: 1.5,
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(360),
                          borderSide:  BorderSide(
                            color: Constants.ctaColorLight,
                            width: 1.5,
                          ),
                        ),
                        filled: true,
                        fillColor: Colors.white,
                        contentPadding: const EdgeInsets.all(0),
                      ),
                      inputFormatters: [
                        FilteringTextInputFormatter.digitsOnly,
                        LengthLimitingTextInputFormatter(1),
                      ],
                      onChanged: (value) => _onDigitChanged(value, index),
                    ),
                  ),
                );
              }),
            ),
            const SizedBox(height: 24),

            // Verify button
            SizedBox(
              width: double.infinity,
              height: 40,
              child: ElevatedButton(
                onPressed: pin.length == widget.pinLength ? _verifyPin : null,
                style: ElevatedButton.styleFrom(
                  backgroundColor: pin.length == widget.pinLength
                      ? Colors.orange
                      : Colors.grey.shade300,
                  foregroundColor: Colors.white,
                  elevation: 3,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(36),
                  ),
                ),
                child:  Text(
                  'Verify',
                  style: GoogleFonts.manrope(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Helper function to show the PIN dialog


